// leetcode 82


class Solution {
public:
ListNode* deleteDuplicates(ListNode* head) {
ListNode *dummy = new ListNode(0);
dummy->next = head;
ListNode *temp = dummy;
while(head != NULL){
if(head->next and head->val == head->next->val){
while(head->next and head->val == head->next->val){
head = head->next;
}
temp->next = head->next;
}
else temp = temp->next;
head = head->next;
}
return dummy->next;
}
};


// leetcode 328

class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
         if (!head || !head->next) {
            return head; // No need to modify the list if it has 0 or 1 node
        }
         ListNode*oddh=head;
          ListNode*evenh=head->next;
           ListNode*odd=oddh;
            ListNode*even=evenh;
            while(even && even->next){
                odd->next=even->next;
                odd=odd->next;

                even->next=odd->next;
                even=even->next;
            }
            odd->next=evenh;
            return oddh;
        
    }
};
